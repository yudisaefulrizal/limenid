// /**--------- FONT FAMILY --------*/
@mixin font-face($font) {
  font-family: $font;
}

// /**--------- START OF MEDIA QUERY --------*/

@mixin breakpoint-min($bp, $rule: min-width) {
  @media only screen and (#{$rule}: map-get($breakpoints, $bp)) {
    @content;
  }
}

@mixin breakpoint-max($bp, $rule: max-width) {
  @media only screen and (#{$rule}: map-get($breakpoints, $bp) - 1) {
    @content;
  }
}

//  EXAMPLE OF USAGE:
// 
//   @include media(xl) {
//     background: blue;
//   }

// /**--------- Start OF Direction Mixin--------*/
$dir: ltr !default;

// Default $dir if not valid
@if $dir !=ltr and $dir !=rtl {
  $dir: ltr;
}

@function ltr($if, $else: null) {
  @if $dir !=rtl {
    @return $if;
  }

  @else {
    @return $else;
  }
}

@function rtl($if, $else: null) {
  @return ltr($else, $if);
}

$left: ltr(left, right);
$right: ltr(right, left);

@function dir-values($values) {
  @if $dir==rtl and length($values)==4 {
    // Reorder right and left positions in list
    @return nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2);
  }

  @else {
    @return $values;
  }
}

@mixin ltr {
  @if $dir !=rtl {
    @content;
  }
}

@mixin rtl {
  @if $dir==rtl {
    @content;
  }
}


//  EXAMPLE OF USAGE:

// section {
//     // define here inline your rtl conditions
//     margin-#{$left}: 10px;
//     @include ltr {
//     float: left;

//     }
//     @include rtl {
//       float: right;
//     }
//   }

// /**--------- START OF MARGIN & PADDING HELPER --------*/
// This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
// It will generate several classes such as:
// .mr-5 which gives margin-right 50 pixels.
// .pl-4 gives PADDING to the LEFT of 40 pixels


// /**--------- START OF PLACEHOLDER TEXT COLOR --------*/
@mixin input-placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}

//  EXAMPLE OF USAGE:
// 
// input{
//     @include input-placeholder {
//         color: #888;
//     }
// }


// /**--------- START OF ARROW WITH FOUR OPTIONAL DIRECTIONS --------*/
@mixin arrow($direction: down, $size: 5, $color: #555) {
  width: 0;
  height: 0;

  @if ($direction==left) {
    border-top: $size + px solid transparent;
    border-bottom: $size + px solid transparent;
    border-#{$right}: $size + px solid $color;
  }

  @else if ($direction==right) {
    border-top: $size + px solid transparent;
    border-bottom: $size + px solid transparent;
    border-#{$left}: $size + px solid $color;
  }

  @else if ($direction==down) {
    border-left: $size + px solid transparent;
    border-right: $size + px solid transparent;
    border-top: $size + px solid $color;
  }

  @else {
    border-left: $size + px solid transparent;
    border-right: $size + px solid transparent;
    border-bottom: $size + px solid $color;
  }
}


//  EXAMPLE OF USAGE:
// 
// without arguments (default)
//  
// div { 
//     @include arrow(); 
//  }

// with custom arguments
//  
//  div {
//     @include arrow(up, 10, #efefef);
//  }


//  COMPILED CSS:
// without arguments (default)
// 
// div {
//     width: 0;
//     height: 0;
//     border-left: 5px solid transparent;
//     border-right: 5px solid transparent;
//     border-top: 5px solid #555;
//  }

// with custom arguments
//  
//  div {
//     width: 0;
//     height: 0;
//     border-left: 10px solid transparent;
//     border-right: 10px solid transparent;
//     border-bottom: 10px solid #efefef;
//  }


//--------- START OF ABSOLUTE POSITIONING --------//
@mixin pos-abs ($top, $right, $bottom, $left) {
  position: absolute !important;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;

  @include rtl {
    right: $left;
    left: $right;

  }
}

//  EXAMPLE OF USAGE:
// 
// .class-name {
//     @include pos-abs(100px, 100px, auto, auto);
//  }

//  COMPILED CSS:
// 
// .class-name {
//    position: absolute;
//    top: 100px;
//    right: 100px;
//    bottom: auto;
//    left: auto;
// }


// /**--------- START OF CENTER POSITIONING --------*/
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute !important;

  @if ($horizontal and $vertical) {
    top: 50%;
    #{$left}: 50%;

    @include ltr {
      transform: translate(-50%, -50%);
    }

    @include rtl {
      transform: translate(50%, -50%);

    }
  }

  @else if ($horizontal) {
    #{$left}: 50%;

    @include ltr {
      transform: translate(-50%, 0);
    }

    @include rtl {
      transform: translate(50%, 0);

    }
  }

  @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

//  EXAMPLE OF USAGE:
// 
//   .parent {
//       position: relative;
//   }
// .child {
//     &.both {
//       @include centerer;
//     }
//     &.horizontal {
//       @include centerer(true, false);
//     }
//     &.vertical {
//       @include centerer(false, true);
//     }
//   }


//  COMPILED CSS:
// 
// .parent {
//     position: relative;
//   }
//   .child.both {
//     position: absolute;
//     top: 50%;
//     left: 50%;
//     transform: translate(-50%, -50%);
//   }
//   .child.horizontal {
//     position: absolute;
//     left: 50%;
//     transform: translate(-50%, 0);
//   }
//   .child.vertical {
//     position: absolute;
//     top: 50%;
//     transform: translate(0, -50%);
//   }


@mixin margin-padding-helper {
  $sides: ("": "",
  "t": "top",
  "b": "bottom",
  "l": "#{$left}",
  "r": "#{$right}",
  );

  @each $breakName,
  $breakValue in $breakpoints {

    @each $sideName,
    $sideValue in $sides {
      @for $i from 0 through 10 {

        $property: if($sideName=='', '', -#{$sideValue});
        $space: $i * 10;
        $selector: '';
        $sideValueAll : #{$space /$base-unit}rem !important;

        @if $breakName !="" {
          $selector: #{$sideName}-#{$breakName}-#{$i};
        }

        @else {
          $selector: #{$sideName}-#{$i};
        }

        @if $breakName !="" {
          @media (min-width: $breakValue) {
            .m#{$selector} {
              margin#{$property}: $sideValueAll;
            }

            .my#{$selector} {
              margin-top: $sideValueAll;
              margin-bottom: $sideValueAll;
            }

            .mx#{$selector} {
              margin-left: $sideValueAll;
              margin-right: $sideValueAll;
            }

            .p#{$selector} {
              padding#{$property}: $sideValueAll;
            }

            .py#{$selector} {
              padding-top: $sideValueAll;
              padding-bottom: $sideValueAll;
            }

            .px#{$selector} {
              padding-left: $sideValueAll;
              padding-right: $sideValueAll;
            }
          }
        }

        @else {
          .m#{$selector} {
            margin#{$property}: $sideValueAll;
          }

          .my#{$selector} {
            margin-top: $sideValueAll;
            margin-bottom: $sideValueAll;
          }

          .mx#{$selector} {
            margin-left: $sideValueAll;
            margin-right: $sideValueAll;
          }

          .p#{$selector} {
            padding#{$property}: $sideValueAll;
          }

          .py#{$selector} {
            padding-top: $sideValueAll;
            padding-bottom: $sideValueAll;
          }

          .px#{$selector} {
            padding-left: $sideValueAll;
            padding-right: $sideValueAll;
          }
        }
      }
    }
  }
}
